
** Compile

Generate =compile_commads.json= with bear
#+begin_src sh
nix shell nixpkgs#bear

make clean
bear -- make
#+end_src

** Serial Peripheral Interface (SPI)
SPI is a bus protocol so you can connect multiple devices to the same bus and control which of them is used at any time by means of their individual =CS= pins. =MISO=, =MOSI=, and =CLK= are common between all devices (when using HW SPI. There are also implementations of SW SPI where all pins can be selected freely)

| Master/Slave (OLD)         | Controller/Peripheral (NEW)          |
|----------------------------+--------------------------------------|
| Master In Slave Out (MISO) | Controller In, Peripheral Out (CIPO) |
| Master Out Slave In (MOSI) | Controller Out Peripheral In (COPI)  |
| Slave Select pin (SS)      | Chip Select Pin (CS)                 |

- CIPO (Controller In Peripheral Out) :: The Peripheral line for sending data to the Controller
- COPI (Controller Out Peripheral In) :: The Controller line for sending data to the peripherals
- SCK (Serial Clock) :: The clock pulses which synchronize data transmission generated by the Controller and one line specific for every device
- CS (Chip Select) :: the pin on each device that the Controller can use to enable and disable specific devices. When a device's Chip Select pin is low, it communicates with the Controller. When it's high, it ignores the Controller. This allows you to have multiple SPI devices sharing the same CIPO, COPI, and SCK lines.

Note: When you use multiple SPI devices, you should disable all by setting =CS= high for all, before initializing any device. Libraries for SPI devices can not detect other devices that may interfere.


When initially driving =CS=-pins high, the following sequence is preferred (at least on Arduino)
#+begin_src cpp
digitalWrite(CS_PIN_DEV_N, HIGH);
pinMode(CS_PIN_DEV_N, OUTPUT);
#+end_src

The reason is that the pin is INPUT after initialization (Hi-res), and switching to output directly sets the pin to output LOW and the chip will be selected and might connect to MISO and start looking for SCLK
The digitalWrite(..,HIGH) then unselects the device, but this takes up to 4uS on 16 MHz Arduino

** [[https://github.com/RobTillaart/MAX6675][MAX6675]]
The MAX6675 is a chip to convert the reading of a K-type thermocouple to a temperature. The MAX6675 only supports positive degrees Celsius.
The values are read with an precision of 0.25°C. Typical noise seen during usage are ± 0.5°C, so using a low pass filter on the temperature might be a good idea.

The working of thermocouples (TC) is based upon Seebeck effect. Different TC's have a different Seebeck Coefficient (SC) expressed in µV/°C. See http://www.analog.com/library/analogDialogue/archives/44-10/thermocouple.html

** I2C LCD

** Pins

This is for HW SPI pins. With SoftWare SPI other pins can be used.

| Name       | Uno | Notes                 |
|------------+-----+-----------------------|
| CLOCK      |  13 | HW SPI                |
| MISO       |  12 | HW SPI                |
| MOSI       |  11 | HW SPI                |
| SELECT, SS |  10 | HW SPI, Can be others |
|------------+-----+-----------------------|
| SDA        |  A4 |                       |
| SCL        |  A5 |                       |
** PID
See [[http://brettbeauregard.com/blog/2011/04/improving-the-beginners-pid-introduction/][Improving the beginners PID]] for improvements to the standard PID equation


\begin{align}
\text{Output} &= K_P e(t) + K_I \int e(t) dt + K_D \frac{d}{dt} e(t) \\
\text{Where}  &: e= \text{Setpoint} - \text{Input}
\end{align}
** SdFat
[[https://github.com/greiman/SdFat][SdFat]] has a [[https://github.com/greiman/SdFat/blob/1535ac2b0332c22da26ca876fd2a04641dffadb4/src/SdFatConfig.h#L255][512 byte buffer]] and all your write go there until you either flush or close the file (see [[https://github.com/greiman/SdFat/blob/1535ac2b0332c22da26ca876fd2a04641dffadb4/src/SdFatConfig.h#L263][this in the configuration file]]) or of course if you reach the buffer capacity. And writing 512 bytes in one go takes a bit of time.

*** Best practices
Any data acquisition should run at interrupt level (i.e. elevated priority) and disk access should be done in loop() (i.e. in the background)

This implies: data acquisition delivers data ASAP into a large buffer and data storage runs async from acquisition whenever disk is ready to receive data.

1. Initialize the SdFs on SdioConfig(FIFO_SDIO) mode.
2. Preallocate the maximum length of your log file using the .preAllocate(size_t size) method.
3. Important: Pre-erase the entire file with zeroes.
4. Before you start logging (to ensure the file is committed fully to the card), call sync().
5. Write in chunks of a multiple of 512bytes only. (512, 1024, 2048 byte chucks per write() command)
6. To minimize blocking, try to write only if .card()->isBusy() returns false. This seems to be related to the internal card data management (I'm guessing things like TRIM and what not). Step 3 helps ensure that the card spends as little time as possible in this busy time.
7. Use a SLC-type SD card. I cannot stress enough the difference this makes. Before buying this card, I had write() operations take up to 10ms on a SanDisk card, but with this expensive card they 99.9% of the time stayed below 500us.
8. Call truncate() and then sync() after you've finished writing your entire file. The first function removes any extra pre-allocation and the second makes sure that it's a proper FAT32 file. Note that if you're using an exFAT partition your file will not be saved until you call sync() or close().
7. On that note, FAT32 is always faster than exFAT, but you do have less capacity.


I prefer to leave the file open, rather than open, write, close at each storage interval. I do call sync() about once per second to make sure that the directory is updated. That way, if something goes wrong, the file state is up to date.
Sync() updates the directory information and end-of-file position. Since it has to write the directory block, it takes some extra time. However, I think it is faster than an open/close cycle.

If you close, then reopen a FAT32 file each time you write, the open process can get time consuming in a few weeks as the file system may have to traverse the FAT table to find the next write location.

If I'm going to log for a long time, I usually close a file just after midnight and start a new file for the next day.

*** Examples
**** LowLatencyLogger
[[https://github.com/greiman/SdFat/blob/master/examples/examplesV1/LowLatencyLogger/LowLatencyLogger.ino][LowLatencyLogger]]

This example adopts a completely different approach to fast logging, and ends up writing directly to the flash sectors without updating the file system until the end. And it uses multiple buffers. The idea with the buffers is that with two of them you don't miss any readings or slow down so long as the write time for one buffer is less than the time it takes to fill up the other buffer.
**** Simpler example
[[https://forum.arduino.cc/t/fast-data-logging-on-sd-card/687012/7][source]]

Note, drop the =logFile.flush()= in the loop.

I do not think thera are benefits of flushing (unless the logging is very infrequent and powerloss/dataloss is a concern).
The library accumulates data going to the SD card until it has 512 bytes, then it writes that to the card. That's one full sector. It can't write less than that. If you try to write a smaller number of bytes, as might happen if you flush when fewer than 512 bytes need to be written, the library will pad with fill. Then if you continue to write data to the card, the library may have to read back in that last sector and figure out where to begin adding the new stuff. I may be completely wrong about how this works, but I don't see why you need to flush at all until you're ready to end the logging session and close the file.

Flushing may also require an extra set of file system updates - updating the file's directory entry, updating the FAT, and updating the second copy of the FAT. All of those would require read/modify/write actions.

The ultimate speed would result from the direct consecutive sector writes, with no file system updates until the end, as is done by the LowLatencyLogger. But short of that, I think the best performance would be to have the data sampling be driven by a timer interrupt, with the ISR saving the raw readings to a circular buffer. Then the main loop would extract those buffer entries and send them (prettified if you like, with commas and such) to the library, which will automatically save that output to the card in 512-byte chunks. The buffer has to be large enough to accomodate the occasional delay that occurs when writing to the card due to the need to allocate the next cluster, or whatever.


#+begin_src cpp
const uint8_t SD_CS_PIN = SS;
#include <SdFat.h>              // https://github.com/greiman/SdFat
SdFat SD;

const unsigned long period = 20000ul; // in µs
const byte bufferSizeToDump = 70; // make it a multiple of 10 to get the \n (no more than 100)

const unsigned long acceptableError = period + 1000ul; // 1ms error
unsigned long chrono = 0;
unsigned long nbWrites = 0;
unsigned long nbErrors = 0;
unsigned long timeBucket = 0;

const char* logName = "log.txt";
File logFile;

char byteBuffer[] = "HELLO YOU\nHELLO YOU\nHELLO YOU\nHELLO YOU\nHELLO YOU\nHELLO YOU\nHELLO YOU\nHELLO YOU\nHELLO YOU\nHELLO YOU\n"; // 10 bytes x n

void setup() {
  Serial.begin(115200);

  // activate the SD card
  if (!SD.begin(SD_CS_PIN)) {
    Serial.println(F("SD Card error"));
    while (true);
  }

  // open the file for logging
  if (!logFile.open(logName, FILE_WRITE)) {
    Serial.println(F("Can't create logfile"));
    while (true);
  }

  // ready to roll
  Serial.println("enter something in the console to stop the log");
  Serial.flush();
  logFile.flush();
  delay(1000); // wait a bit before getting going
  chrono = micros();
}

void loop() {
  unsigned long deltaT = micros() - chrono;
  if (deltaT > period) { // 50Hz
    logFile.write(byteBuffer, bufferSizeToDump); // write our bytes
    // XXX: remove flush. Call sync() every second or so instead.
    logFile.flush(); // dump to card
    nbWrites++;
    if (deltaT > acceptableError) {
      nbErrors++;
      Serial.print(nbWrites);
      Serial.println("\t>1ms late");
    }
    chrono += period; // trying to keep up the pace, if OK with the lost time, you can try chrono = micros();
    timeBucket += period - (micros() - chrono);
  }

  if (Serial.read() != -1) { // stop collection as soon as user enters something in the console
    logFile.close();
    Serial.print(F("Running at "));
    Serial.print(1000000ul / period);
    Serial.print(F("Hz, "));
    Serial.print(nbWrites);
    Serial.print(F(" writes, generated "));
    Serial.print(nbErrors);
    Serial.print(F(" errors and average time bucket: "));
    Serial.print(timeBucket / nbWrites);
    Serial.println(F(" µs. LOG STOPPED."));

    while (true); // die here
  }
}

#+end_src
**** Simple SD

#+begin_src cpp
#include <SD>
#include

const int chipSelect = 4;
File dataFile;

struct datastore {
    uint16_t adc1;
    uint16_t adc2;
    float voltage;
    float current;
};

void setup() {
    Serial.begin(9600);
    Serial.print("Initializing SD card...");
    pinMode(10, OUTPUT);

    if (!SD.begin(chipSelect)) {
        Serial.println("Card failed, or not present");
        return;
    }

    Serial.println("card initialized.");
    dataFile = SD.open("datalog.dat", FILE_READ);
}

void loop() {
    if (dataFile.available()) {
        struct datastore myData;
        dataFile.read((uint8_t *)&myData, sizeof(myData));
        analogWrite(5, map(myData.adc1, 0, 1023, 0, 255));
        analogWrite(6, map(myData.adc2, 0, 1023, 0, 255));
        Serial.print(myData.voltage, 4);
        Serial.print(" ");
        Serial.println(myData.current, 4);
        delay(50);
    }
}
#+end_src
